name: Deploy Mortgage Demo to Azure

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AZURE_CONTAINER_REGISTRY: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
      AZURE_CONTAINER_REGISTRY_USERNAME: ${{ secrets.AZURE_CONTAINER_REGISTRY_USERNAME }}
      AZURE_CONTAINER_REGISTRY_PASSWORD: ${{ secrets.AZURE_CONTAINER_REGISTRY_PASSWORD }}
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
      RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
      LOCATION: ${{ vars.AZURE_LOCATION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4      
      
      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Grant SQL Administrator role to the service principal at resource group level
      - name: Grant SQL Administrator role to service principal
        run: |
          # Add error handling to ensure the script fails if critical commands fail
          set -e
          
          # Get the object ID of the current service principal
          echo "Getting service principal ID..."
          current_sp_id=$(az ad signed-in-user show --query id -o tsv 2>/dev/null || az ad sp show --id $(az account show --query user.name -o tsv) --query id -o tsv)
          
          if [ -z "$current_sp_id" ]; then
            echo "Error: Failed to obtain service principal ID"
            exit 1
          fi
          
          echo "Service principal ID: $current_sp_id"
            # Check if role assignment exists to avoid duplicate assignments
          echo "Checking for existing role assignment..."
          # Get resource group ID for proper scoping
          rg_id=$(az group show --name ${{ env.RESOURCE_GROUP }} --query id -o tsv)
          existing_role=$(az role assignment list --assignee "$current_sp_id" --role "SQL Server Contributor" --scope "$rg_id" --query "[].roleDefinitionName" -o tsv)
            if [ -z "$existing_role" ]; then
            echo "Granting SQL Server Contributor role to service principal at resource group level"
            # Get resource group ID for proper scoping
            rg_id=$(az group show --name ${{ env.RESOURCE_GROUP }} --query id -o tsv)
            az role assignment create --assignee "$current_sp_id" --role "SQL Server Contributor" --scope "$rg_id"
              # Verify the role was assigned
            verify_role=$(az role assignment list --assignee "$current_sp_id" --role "SQL Server Contributor" --scope "$rg_id" --query "[].roleDefinitionName" -o tsv)
            if [ -z "$verify_role" ]; then
              echo "Error: Failed to assign SQL Server Contributor role"
              exit 1
            fi
          else
            echo "Service principal already has SQL Server Contributor role"
          fi

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        with:
          login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}
          username: ${{ env.AZURE_CONTAINER_REGISTRY_USERNAME }}
          password: ${{ env.AZURE_CONTAINER_REGISTRY_PASSWORD }}

      - name: Build and push Loan Processing Service (.NET)
        run: |
          cd loan-processing-service
          dotnet publish -c Release -o out
          docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/loan-processing-service:${{ github.sha }} .
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/loan-processing-service:${{ github.sha }}

      - name: Build and push Customer Service (Java)
        run: |
          cd customer-service
          ./mvnw package -DskipTests || mvn package -DskipTests
          docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/customer-service:${{ github.sha }} .
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/customer-service:${{ github.sha }}

      - name: Build and push Web UI (React)
        run: |
          cd web-ui
          npm install
          npm run build
          docker build -t ${{ env.AZURE_CONTAINER_REGISTRY }}/web-ui:${{ github.sha }} .
          docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/web-ui:${{ github.sha }}
          
      # Removed pre-Bicep AAD-only check since we will handle this after getting actual SQL server name from Bicep outputs      # Get current user/service principal ID for SQL AD Admin
      - name: Get current user object ID for AD Admin
        id: get_current_user
        run: |
          # Get the object ID of the current user (service principal)
          current_user_id=$(az ad signed-in-user show --query id -o tsv 2>/dev/null || az ad sp show --id $(az account show --query user.name -o tsv) --query id -o tsv)
          echo "object_id=$current_user_id" >> $GITHUB_OUTPUT
          
      # Check and clean up existing container apps before deployment
      - name: Check and clean up existing container apps
        run: |
          # Set up error handling
          set -e
          
          echo "Checking for existing container apps in resource group ${{ env.RESOURCE_GROUP }}..."
          
          # Loop through all container apps we want to deploy
          for app in loan-processing-service customer-service web-ui; do
            echo "Checking if container app '$app' exists..."
            
            # Check if app exists (doesn't matter in which environment)
            app_exists=$(az containerapp list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='$app'].id" -o tsv)
            
            if [ -n "$app_exists" ]; then
              echo "Container app '$app' found. Getting current environment..."
              
              # Get the environment ID from the container app
              current_env_id=$(az containerapp show --name $app --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.managedEnvironmentId" -o tsv)
              current_env_name=$(echo $current_env_id | awk -F'/' '{print $NF}')
              
              echo "Container app '$app' exists in environment '$current_env_name'. Deleting container app..."
              
              # Delete the container app
              az containerapp delete --name $app --resource-group ${{ env.RESOURCE_GROUP }} --yes
              
              echo "Container app '$app' deleted successfully."
            else
              echo "Container app '$app' not found. No cleanup needed."
            fi          done
          
          echo "Container app cleanup completed."
          
      - name: Deploy infrastructure and container apps (Bicep)
        id: deploy_bicep
        run: |
          DEPLOYMENT_NAME=mortgage-deployment-${{ github.sha }}
          
          # First run a what-if operation to check for potential issues
          echo "Running what-if deployment validation..."
          az deployment group what-if \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file infra/main.bicep \
            --parameters \
              azureAdAdminObjectId=${{ steps.get_current_user.outputs.object_id }} \
              loanProcessingImage=${{ env.AZURE_CONTAINER_REGISTRY }}/loan-processing-service:${{ github.sha }} \
              customerServiceImage=${{ env.AZURE_CONTAINER_REGISTRY }}/customer-service:${{ github.sha }} \
              webUiImage=${{ env.AZURE_CONTAINER_REGISTRY }}/web-ui:${{ github.sha }} \
              registryUsername=${{ env.AZURE_CONTAINER_REGISTRY_USERNAME }} \
              registryPassword=${{ env.AZURE_CONTAINER_REGISTRY_PASSWORD }} \
              registryServer=${{ env.AZURE_CONTAINER_REGISTRY }}
          
          # Now run the actual deployment
          echo "Running actual deployment..."
          az deployment group create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --template-file infra/main.bicep \
            --parameters \
              azureAdAdminObjectId=${{ steps.get_current_user.outputs.object_id }} \
              loanProcessingImage=${{ env.AZURE_CONTAINER_REGISTRY }}/loan-processing-service:${{ github.sha }} \
              customerServiceImage=${{ env.AZURE_CONTAINER_REGISTRY }}/customer-service:${{ github.sha }} \
              webUiImage=${{ env.AZURE_CONTAINER_REGISTRY }}/web-ui:${{ github.sha }} \
              registryUsername=${{ env.AZURE_CONTAINER_REGISTRY_USERNAME }} \
              registryPassword=${{ env.AZURE_CONTAINER_REGISTRY_PASSWORD }} \
              registryServer=${{ env.AZURE_CONTAINER_REGISTRY }} \
            --name $DEPLOYMENT_NAME

          echo "Deployment finished. Getting outputs:"
          az deployment group show \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name $DEPLOYMENT_NAME \
            -o json > deployment-full.json

          cat deployment-full.json
          jq '.properties.outputs' deployment-full.json > bicep-outputs.json
          cat bicep-outputs.json   

      - name: Get Storage, SQL Server, and SQL DB Names from Bicep Outputs
        id: get_resource_names
        run: |
          storage_account_name=$(jq -r '.storageAccountName.value' bicep-outputs.json)
          sql_server_name=$(jq -r '.sqlServerName.value' bicep-outputs.json)
          sql_db_name=$(jq -r '.sqlDbName.value' bicep-outputs.json)
          echo "storage_account_name=$storage_account_name" >> $GITHUB_OUTPUT
          echo "sql_server_name=$sql_server_name" >> $GITHUB_OUTPUT
          echo "sql_db_name=$sql_db_name" >> $GITHUB_OUTPUT      # No need to toggle AAD-only auth since we're using AAD authentication throughout

      - name: Get Application Insights Resource Name from Bicep Outputs
        id: get_appinsights_name
        run: |
          appinsights_name=$(jq -r '.appInsightsName.value' bicep-outputs.json)
          echo "appinsights_name=$appinsights_name" >> $GITHUB_OUTPUT

      - name: Get Managed Identity Principal ID
        id: get_managed_identity
        run: |
          # Check if identity exists
          existing_identity=$(az identity show --name mortgageapp-identity --resource-group ${{ env.RESOURCE_GROUP }} --query 'id' -o tsv 2>/dev/null) || true
          
          if [ -z "$existing_identity" ]; then
            echo "Creating managed identity mortgageapp-identity"
            az identity create --name mortgageapp-identity --resource-group ${{ env.RESOURCE_GROUP }} --location ${{ env.LOCATION }}
          else
            echo "Managed identity mortgageapp-identity already exists"
          fi
            # Get the principal ID
          principal_id=$(az identity show --name mortgageapp-identity --resource-group ${{ env.RESOURCE_GROUP }} --query 'principalId' -o tsv)
          echo "principal_id=$principal_id" >> $GITHUB_OUTPUT

      - name: Get SQL Server FQDN
        id: get_sql_fqdn
        run: |
          # Use the SQL server name we already have from Bicep outputs instead of complex nested queries
          sql_fqdn=$(az sql server show --name ${{ steps.get_resource_names.outputs.sql_server_name }} --resource-group ${{ env.RESOURCE_GROUP }} --query fullyQualifiedDomainName -o tsv)
            # Add error handling
          if [ -z "$sql_fqdn" ]; then
            echo "Error: Could not retrieve SQL Server FQDN"
            exit 1
          fi
          
          echo "sql_fqdn=$sql_fqdn" >> $GITHUB_OUTPUT

      - name: Create Managed Identity User in SQL DB using Azure AD auth
        run: |
          # Enable verbose debugging and error handling
          set -e
          
          sql_server_name=${{ steps.get_resource_names.outputs.sql_server_name }}
          db_name=${{ steps.get_resource_names.outputs.sql_db_name }}
          principal_id=${{ steps.get_managed_identity.outputs.principal_id }}
          
          # Verify we have all required values
          if [ -z "$sql_server_name" ] || [ -z "$db_name" ] || [ -z "$principal_id" ]; then
            echo "Error: Missing required parameters for SQL user creation."
            [ -z "$sql_server_name" ] && echo "SQL server name is empty"
            [ -z "$db_name" ] && echo "Database name is empty"
            [ -z "$principal_id" ] && echo "Principal ID is empty"
            exit 1
          fi
          
          # Get the current runner's IP address
          echo "Getting current runner's public IP address..."
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "Current runner's public IP: $RUNNER_IP"
          
          # Add a firewall rule to allow access from the GitHub Actions runner
          echo "Adding SQL Server firewall rule for GitHub Actions runner..."
          az sql server firewall-rule create \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --server $sql_server_name \
            --name "GithubActionsRunner-$GITHUB_RUN_ID" \
            --start-ip-address $RUNNER_IP \
            --end-ip-address $RUNNER_IP
          
          # Install the sqlcmd utility for AAD authentication
          echo "Installing sqlcmd utility..."
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          
          # Create SQL script for user creation with AD auth
          # This is simplified because the service principal already has SQL Server Contributor role
          cat > setup-aad-user.sql << EOF
          -- Create user for managed identity
          IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = 'appidentity')
          BEGIN
              CREATE USER [appidentity] FROM EXTERNAL PROVIDER WITH OBJECT_ID = '$principal_id';
          END
          
          -- These statements are idempotent - adding a member to a role twice does not cause an error
          ALTER ROLE db_datareader ADD MEMBER [appidentity];
          ALTER ROLE db_datawriter ADD MEMBER [appidentity];
          EOF          # Execute commands using Azure AD authentication with the current signed-in user
          sql_fqdn=${{ steps.get_sql_fqdn.outputs.sql_fqdn }}
          echo "Executing SQL script against $sql_fqdn using AAD auth with access token..."
          
          # Get an access token for the SQL database
          echo "Obtaining Azure access token for SQL database..."
          token=$(az account get-access-token --resource https://database.windows.net/ --query accessToken -o tsv)
          
          if [ -z "$token" ]; then
            echo "Error: Could not obtain access token for SQL authentication"
            exit 1
          fi
            # Use access token for authentication instead of integrated auth
          echo "Running SQL commands with Azure AD token-based authentication"
          
          # Try with token-based auth
          echo "Attempting to execute SQL with token-based authentication..."
          if /opt/mssql-tools/bin/sqlcmd -S "$sql_fqdn" -d "$db_name" -P "$token" -G -I -C -i setup-aad-user.sql; then
            echo "SQL script executed successfully with token-based authentication."
          else
            echo "Token-based authentication failed. Trying alternative approach..."
            
            # Alternative approach: Use az sql commands directly
            echo "Using az sql db commands to create user and assign roles..."
            
            # Create a SQL script that uses the logged-in Azure admin to create our managed identity user
            cat > setup-aad-user-alt.sql << EOF
            -- Create user for managed identity
            IF NOT EXISTS (SELECT * FROM sys.database_principals WHERE name = 'appidentity')
            BEGIN
                CREATE USER [appidentity] FROM EXTERNAL PROVIDER WITH OBJECT_ID = '$principal_id';
            END
            
            -- These statements are idempotent - adding a member to a role twice does not cause an error
            ALTER ROLE db_datareader ADD MEMBER [appidentity];
            ALTER ROLE db_datawriter ADD MEMBER [appidentity];
            EOF
            
            # Execute T-SQL directly via az sql db query
            echo "Executing SQL with az sql db query..."
            az sql db query \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --server $sql_server_name \
              --name $db_name \
              --query-file setup-aad-user-alt.sql
            
            # Verify if the query was successful
            if [ $? -eq 0 ]; then
              echo "SQL user creation successful using az sql db query."
            else
              echo "Error: Failed to create SQL user using az sql db query."
              exit 1
            fi
          fi
            # Clean up: Remove the temporary firewall rule
          echo "Removing temporary SQL Server firewall rule..."
          az sql server firewall-rule delete \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --server $sql_server_name \
            --name "GithubActionsRunner-$GITHUB_RUN_ID" \
            --yes
            
      - name: Create Blob Storage Container
        run: |
          storage_account=${{ steps.get_resource_names.outputs.storage_account_name }}
          echo "Creating blob container if it doesn't exist..."
          echo "Using storage account: $storage_account in resource group: ${{ env.RESOURCE_GROUP }}"
          
          # First, check if storage account exists
          if ! az storage account show --name $storage_account --resource-group ${{ env.RESOURCE_GROUP }} &>/dev/null; then
            echo "Error: Storage account $storage_account not found in resource group ${{ env.RESOURCE_GROUP }}"
            exit 1
          fi
          
          # Get the current runner's IP address
          echo "Getting current runner's public IP address..."
          RUNNER_IP=$(curl -s https://api.ipify.org)
          echo "Current runner's public IP: $RUNNER_IP"
          
          # Add the runner's IP to the storage account network rules temporarily
          echo "Adding GitHub Actions runner IP to storage account network rules..."
          az storage account network-rule add \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --account-name $storage_account \
            --ip-address $RUNNER_IP
            
          # Update the default action to deny (if not already set)
          az storage account update \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name $storage_account \
            --default-action Allow \
            --bypass AzureServices
            
          # Wait a short time for the network rule to take effect
          echo "Waiting 15 seconds for network rule to take effect..."
          sleep 15
            
          # Check if container exists first (idempotency) - using Azure AD auth
          echo "Checking if container exists using Azure AD authentication..."
          container_exists=$(az storage container exists \
            --account-name $storage_account \
            --auth-mode login \
            --name "mortgage-data" \
            --query exists -o tsv)
            
          if [ "$container_exists" = "true" ]; then
            echo "Container 'mortgage-data' already exists. Skipping creation."
          else
            echo "Container 'mortgage-data' does not exist. Creating now..."
            # Create container using Azure AD auth
            az storage container create \
              --account-name $storage_account \
              --auth-mode login \
              --name "mortgage-data"
            echo "Container created successfully."
          fi
          
          # Remove the temporary network rule for the runner's IP
          echo "Removing GitHub Actions runner IP from storage account network rules..."
          az storage account network-rule remove \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --account-name $storage_account \
            --ip-address $RUNNER_IP
            
          # Restore the default action if it was previously set to deny
          # Note: If your security policy requires deny as default, uncomment the next block
          # az storage account update \
          #   --resource-group ${{ env.RESOURCE_GROUP }} \
          #   --name $storage_account \
          #   --default-action Deny
          
          echo "Storage account network rules restored."

      - name: Assign Storage and SQL roles to system-assigned managed identities
        run: |
          # Get resource IDs
          storage_id=$(az storage account show --name ${{ steps.get_resource_names.outputs.storage_account_name }} --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} --query id -o tsv)
          sql_server_id=$(az sql server show --name ${{ steps.get_resource_names.outputs.sql_server_name }} --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} --query id -o tsv)
          sql_db_id=$(az sql db show --name ${{ steps.get_resource_names.outputs.sql_db_name }} --server ${{ steps.get_resource_names.outputs.sql_server_name }} --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} --query id -o tsv)

          # Assign Storage Blob Data Contributor to each container app identity
          for app in loan-processing-service customer-service web-ui; do
            principal_id=$(az containerapp show --name $app --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} --query identity.principalId -o tsv)
            
            # The az role assignment create command is idempotent by default
            # If the assignment already exists, it will not create a duplicate
            echo "Creating or ensuring role assignment for $app to Storage Blob Data Contributor"            az role assignment create --assignee $principal_id --role "Storage Blob Data Contributor" --scope $storage_id
          done

          # Container apps will use their system-assigned managed identities to access Azure SQL
          # This is handled by the Azure AD user we created earlier with the "appidentity" name
          # No additional SQL user creation needed here since we're using AAD authentication
          for app in loan-processing-service customer-service; do
            principal_id=$(az containerapp show --name $app --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} --query identity.principalId -o tsv)
            echo "Container app $app has principal ID: $principal_id - will use Azure AD authentication for SQL access"
          done

      - name: Create Application Insights Release Annotation (REST API)
        run: |
          app_id=${{ steps.get_appinsights_name.outputs.appinsights_name }}
          rg=${{ env.RESOURCE_GROUP }}
          subscription_id=$(az account show --query id -o tsv)
          annotation_id="release-${GITHUB_SHA}"
          # Creating timestamp in ISO8601 format (UTC)
          current_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          body=$(jq -n \
            --arg id "$annotation_id" \
            --arg name "Release $GITHUB_SHA" \
            --arg desc "Release deployed from $GITHUB_REPOSITORY at commit $GITHUB_SHA (run $GITHUB_RUN_NUMBER)" \
            --arg sha "$GITHUB_SHA" \
            --arg run_id "$GITHUB_RUN_ID" \
            --arg workflow "$GITHUB_WORKFLOW" \
            --arg event_time "$current_time" \
            '{Id: $id, AnnotationName: $name, AnnotationDescription: $desc, Category: "Deployment", EventTime: $event_time, Tags: {sha: $sha, run_id: $run_id, workflow: $workflow, id: $id}}')
          az rest --method put \
            --uri "https://management.azure.com/subscriptions/${subscription_id}/resourceGroups/$rg/providers/microsoft.insights/components/$app_id/Annotations?api-version=2015-05-01" \
            --body "$body"

      - name: Copy JMeter file for Load Test
        run: |
          mkdir -p ${{ github.workspace }}/load-testing-artifacts
          cp ./load-testing/mortgage-demo.jmx ${{ github.workspace }}/load-testing-artifacts/mortgage-demo.jmx

      - name: Run Azure Load Test (smoke test)
        id: loadtest
        run: |
          # Get FQDNs from deployment outputs
          loan_fqdn=$(az deployment group show --resource-group ${{ env.RESOURCE_GROUP }} --name $(az deployment group list --resource-group ${{ env.RESOURCE_GROUP }} --query '[0].name' -o tsv) --query 'properties.outputs.loanProcessingFqdn.value' -o tsv)
          customer_fqdn=$(az deployment group show --resource-group ${{ env.RESOURCE_GROUP }} --name $(az deployment group list --resource-group ${{ env.RESOURCE_GROUP }} --query '[0].name' -o tsv) --query 'properties.outputs.customerServiceFqdn.value' -o tsv)

          # Create unique test names (with and without spaces) based on commit SHA
          test_id="mortgage-test-${GITHUB_SHA:0:8}"
          test_display_name="Smoke Test - ${GITHUB_SHA:0:8}"
          
          echo "Running Azure Load Test with display name: $test_display_name"
          echo "Test ID: $test_id"
          
          # First create/update the test definition
          test_exists=$(az load test show --name $test_id --resource-group ${{ env.RESOURCE_GROUP }} --load-test-resource mortgage-loadtest 2>/dev/null) || true
          
          if [ -z "$test_exists" ]; then
            echo "Creating new test definition: $test_id"
            az load test create \
              --test-id $test_id \
              --name $test_id \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --load-test-resource mortgage-loadtest \
              --test-plan "${{ github.workspace }}/load-testing-artifacts/mortgage-demo.jmx" \
              --description "Smoke test for mortgage application" \
              --display-name "$test_display_name" \
              --env LOAN_API_HOST="$loan_fqdn" CUSTOMER_API_HOST="$customer_fqdn"
          else
            echo "Test already exists. Updating test plan."
            az load test update \
              --test-id $test_id \
              --name $test_id \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --load-test-resource mortgage-loadtest \
              --test-plan "${{ github.workspace }}/load-testing-artifacts/mortgage-demo.jmx" \
              --display-name "$test_display_name" \
              --env LOAN_API_HOST="$loan_fqdn" CUSTOMER_API_HOST="$customer_fqdn"
          fi
            # Now run the test
          echo "Starting test run for: $test_id"
          az load test-run start \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --load-test-resource mortgage-loadtest \
            --test-id $test_id \
            --display-name "$test_display_name"

      - name: Azure Logout
        run: az logout
